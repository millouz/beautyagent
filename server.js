import express from "express";
import fetch from "node-fetch";
import Stripe from "stripe";
import fs from "fs";

const app = express();

/* Stripe veut le body brut pour vÃ©rifier la signature */
app.use("/stripe-webhook", express.raw({ type: "application/json" }));
/* JSON normal pour le reste */
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

/* Mini base JSON locale */
const DB_PATH = "./db.json";
if (!fs.existsSync(DB_PATH)) {
  fs.writeFileSync(DB_PATH, JSON.stringify({ clients: [] }, null, 2));
}
const readDB = () => JSON.parse(fs.readFileSync(DB_PATH, "utf8"));
const writeDB = (data) =>
  fs.writeFileSync(DB_PATH, JSON.stringify(data, null, 2));

/* Variables dâ€™environnement */
const {
  PORT,
  STRIPE_SECRET,
  STRIPE_PRICE_ID,
  STRIPE_WEBHOOK_SECRET,
  VERIFY_TOKEN,
  OPENAI_API_KEY,
  DEFAULT_WA_TOKEN,
  DEFAULT_PHONE_NUMBER_ID,
} = process.env;

// Token attenduÂ : valeur dÃ©finie dans VERIFY_TOKEN ou, Ã  dÃ©faut, "beautyagent_verify"
const expectedToken = (VERIFY_TOKEN || "beautyagent_verify").trim();

// Port dâ€™Ã©coute (Render fournit automatiquement PORT dans lâ€™environnement)
const port = Number(PORT || 3000);

// Instance Stripe
const stripe = new Stripe(STRIPE_SECRET);

/* 1) CrÃ©ation dâ€™une session Checkout (abonnement) */
app.post("/checkout/create", async (req, res) => {
  try {
    const { email } = req.body || {};
    const session = await stripe.checkout.sessions.create({
      mode: "subscription",
      line_items: [{ price: STRIPE_PRICE_ID, quantity: 1 }],
      success_url:
        "https://app.beautyagent.ai/onboarding?session_id={CHECKOUT_SESSION_ID}",
      cancel_url: "https://beautyagent-ai-glow.lovable.app/#tarifs",
      customer_email: email,
    });
    res.json({ url: session.url });
  } catch (e) {
    console.error("checkout_error:", e);
    res.status(400).json({ error: "checkout_error" });
  }
});

/* 2) Webhook Stripe */
app.post("/stripe-webhook", (req, res) => {
  try {
    const sig = req.headers["stripe-signature"];
    const event = stripe.webhooks.constructEvent(
      req.body,
      sig,
      STRIPE_WEBHOOK_SECRET
    );

    if (event.type === "checkout.session.completed") {
      const s = event.data.object;
      const db = readDB();
      db.clients ??= [];
      db.clients.push({
        id: s.id,
        email: s.customer_details?.email || s.customer_email,
        status: "pending_onboarding",
        clinic: null,
        phone_number_id: null,
        wa_token: null,
        openai_key: null,
        prompt: null,
      });
      writeDB(db);
    }
    res.sendStatus(200);
  } catch (err) {
    console.error("stripe_webhook_error:", err?.message);
    res.sendStatus(400);
  }
});

/* 3) Fin dâ€™onboarding pour un client */
app.post("/onboarding/complete", async (req, res) => {
  try {
    const {
      session_id,
      clinic_name,
      phone_number_id,
      wa_token,
      openai_key,
      prompt,
    } = req.body || {};
    const db = readDB();
    const c = (db.clients ??= []).find((x) => x.id === session_id);
    if (!c) return res.status(404).json({ error: "session_not_found" });

    c.status = "active";
    c.clinic = clinic_name;
    c.phone_number_id = phone_number_id || DEFAULT_PHONE_NUMBER_ID;
    c.wa_token = wa_token || DEFAULT_WA_TOKEN;
    c.openai_key = openai_key || OPENAI_API_KEY;
    // Nouveau script par dÃ©faut pour lâ€™agent
    c.prompt =
      prompt ||
      `Tu es Pamela, un agent conversationnel IA haut de gamme reprÃ©sentant une clinique de chirurgie esthÃ©tique.
Ton rÃ´leÂ : dialoguer sur WhatsApp avec des prospects et qualifier leur demande de maniÃ¨re fluide et naturelle, sans paraÃ®tre mÃ©canique.

ObjectifsÂ :
1. RÃ©pondre avec tact et professionnalisme aux questions frÃ©quentes (interventions, dÃ©lais, rÃ©cupÃ©ration, budget indicatif), sans donner de diagnostic mÃ©dical.
2. Collecter progressivement les informations clÃ©s en posant des questions courtes, simples et adaptÃ©es au fil de la conversationÂ :
   - Type dâ€™intervention souhaitÃ©e
   - Objectif recherchÃ© (esthÃ©tique, correctif, autre)
   - Budget disponible (fourchette ou maximum)
   - DÃ©lai/timing souhaitÃ© (urgent, 1-3Â mois, 3-12Â mois, plus tard)
   - AntÃ©cÃ©dents mÃ©dicaux pertinents (grossesse, tabac, maladies chroniques, opÃ©rations rÃ©centes, allergies)
   - Nom, prÃ©nom, Ã¢ge
   - Meilleur moyen de contact (WhatsApp, appel, email)
3. Classer automatiquement le prospect enÂ :
   - **CHAUD**Â : budget clair + projetÂ <3Â mois
   - **TIEDE**Â : budget flou/limitÃ© ou projet Ã  moyen terme
   - **FROID**Â : curiositÃ©, pas de budget ni de timing
4. Proposer toujours une prochaine Ã©tape claireÂ : prise de rendez-vous (prÃ©sentiel ou visio) avec le chirurgien ou son assistante.

StyleÂ :
- Messages courts (1â€“2Â phrases max).
- Ton chaleureux, haut de gamme, rassurant.
- Utilise des Ã©mojis lÃ©gers pour humaniser (âœ¨, ğŸ˜Š, ğŸ“…) mais jamais excessifs.
- Jamais de jargon mÃ©dical, reste clair et accessible.

Sortie attendue Ã  la fin de chaque conversation (non envoyÃ©e au prospect, mais transmise Ã  lâ€™assistante)Â :

ğŸ“‹ **Fiche lead**
NomÂ :
PrÃ©nomÂ :
Ã‚geÂ :
ContactÂ : [WhatsApp / email / tÃ©lÃ©phone]
Type dâ€™interventionÂ :
ObjectifÂ :
BudgetÂ :
TimingÂ :
Infos mÃ©dicalesÂ :
PrÃ©fÃ©rence de contactÂ :
CatÃ©gorie leadÂ : [CHAUD / TIEDE / FROID]
Commentaires utilesÂ :
`;
    writeDB(db);

    res.json({ ok: true });
  } catch (e) {
    console.error("onboarding_error:", e);
    res.status(400).json({ error: "onboarding_error" });
  }
});

/* 4) Webhook WhatsApp (validation et rÃ©ception des messages) */
// Validation du webhook (GET)
app.get("/webhook", (req, res) => {
  const mode = req.query["hub.mode"];
  const token = (req.query["hub.verify_token"] || "").trim();
  const challenge = req.query["hub.challenge"];
  if (
    mode === "subscribe" &&
    (token === expectedToken || token === "beautyagent_verify")
  ) {
    return res.status(200).send(challenge);
  }
  return res.sendStatus(403);
});

// RÃ©ception des messages WhatsApp (POST)
app.post("/webhook", async (req, res) => {
  try {
    const entry = req.body.entry?.[0];
    const change = entry?.changes?.[0]?.value;
    const msg = change?.messages?.[0];
    const phoneNumberId = change?.metadata?.phone_number_id;
    const from = msg?.from;
    const text = msg?.text?.body || "";

    if (from && text && phoneNumberId) {
      // Cherche un client actif correspondant au numÃ©ro
      const db = readDB();
      const client = (db.clients ?? []).find(
        (x) => x.phone_number_id === phoneNumberId && x.status === "active"
      );

      // Nettoie les jetons et clÃ©s
      const useToken = (
        client?.wa_token ||
        DEFAULT_WA_TOKEN ||
        ""
      ).replace(/\s/g, "");
      const useOpenAI = (client?.openai_key || OPENAI_API_KEY || "").trim();

      // Prompt systÃ¨meÂ : utilise le prompt personnalisÃ© du client ou le nouveau prompt par dÃ©faut
      const sysPrompt =
        client?.prompt ||
        `Tu es un agent conversationnel IA haut de gamme reprÃ©sentant une clinique de chirurgie esthÃ©tique.
Ton rÃ´leÂ : dialoguer sur WhatsApp avec des prospects et qualifier leur demande de maniÃ¨re fluide et naturelle, sans paraÃ®tre mÃ©canique.

ObjectifsÂ :
1. RÃ©pondre avec tact et professionnalisme aux questions frÃ©quentes (interventions, dÃ©lais, rÃ©cupÃ©ration, budget indicatif), sans donner de diagnostic mÃ©dical.
2. Collecter progressivement les informations clÃ©s en posant des questions courtes, simples et adaptÃ©es au fil de la conversationÂ :
   - Type dâ€™intervention souhaitÃ©e
   - Objectif recherchÃ© (esthÃ©tique, correctif, autre)
   - Budget disponible (fourchette ou maximum)
   - DÃ©lai/timing souhaitÃ© (urgent, 1-3Â mois, 3-12Â mois, plus tard)
   - AntÃ©cÃ©dents mÃ©dicaux pertinents (grossesse, tabac, maladies chroniques, opÃ©rations rÃ©centes, allergies)
   - Nom, prÃ©nom, Ã¢ge
   - Meilleur moyen de contact (WhatsApp, appel, email)
3. Classer automatiquement le prospect enÂ :
   - **CHAUD**Â : budget clair + projetÂ <3Â mois
   - **TIEDE**Â : budget flou/limitÃ© ou projet Ã  moyen terme
   - **FROID**Â : curiositÃ©, pas de budget ni de timing
4. Proposer toujours une prochaine Ã©tape claireÂ : prise de rendez-vous (prÃ©sentiel ou visio) avec le chirurgien ou son assistante.

StyleÂ :
- Messages courts (1â€“2Â phrases max).
- Ton chaleureux, haut de gamme, rassurant.
- Utilise des Ã©mojis lÃ©gers pour humaniser (âœ¨, ğŸ˜Š, ğŸ“…) mais jamais excessifs.
- Jamais de jargon mÃ©dical, reste clair et accessible.

Sortie attendue Ã  la fin de chaque conversation (non envoyÃ©e au prospect, mais transmise Ã  lâ€™assistante)Â :

ğŸ“‹ **Fiche lead**
NomÂ :
PrÃ©nomÂ :
Ã‚geÂ :
ContactÂ : [WhatsApp / email / tÃ©lÃ©phone]
Type dâ€™interventionÂ :
ObjectifÂ :
BudgetÂ :
TimingÂ :
Infos mÃ©dicalesÂ :
PrÃ©fÃ©rence de contactÂ :
CatÃ©gorie leadÂ : [CHAUD / TIEDE / FROID]
Commentaires utilesÂ :
`;

      // GÃ©nÃ¨re une rÃ©ponse avec OpenAI
      let reply = "Merci pour votre message.";
      try {
        const completion = await fetch(
          "https://api.openai.com/v1/chat/completions",
          {
            method: "POST",
            headers: {
              Authorization: `Bearer ${useOpenAI}`,
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              model: "gpt-3.5-turbo",
              max_tokens: 200,
              temperature: 0.4,
              messages: [
                { role: "system", content: sysPrompt },
                { role: "user", content: text },
              ],
            }),
          }
        ).then((r) => r.json());
        reply =
          completion?.choices?.[0]?.message?.content?.slice(0, 1000) || reply;
      } catch (e) {
        console.error("openai_error:", e);
      }

      // Envoi de la rÃ©ponse via lâ€™API WhatsApp
      await fetch(
        `https://graph.facebook.com/v20.0/${phoneNumberId}/messages`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${useToken}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            messaging_product: "whatsapp",
            to: `+${from}`,
            type: "text",
            text: { body: reply },
          }),
        }
      );
    }
    // RÃ©pond immÃ©diatement Ã  WhatsApp
    res.sendStatus(200);
  } catch (e) {
    console.error("whatsapp_webhook_error:", e);
    res.sendStatus(200);
  }
});

/* 5) Route de health check */
app.get("/", (_req, res) => res.send("BeautyAgent OK"));

/* DÃ©marrage du serveur */
app.listen(port, () => {
  console.log(`BeautyAgent running on port ${port}`);
});
